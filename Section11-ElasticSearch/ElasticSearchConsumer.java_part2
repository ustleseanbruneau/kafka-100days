package com.github.leseanbruneau.kafka.tutorial3;

import java.io.IOException;
import java.time.Duration;
import java.util.Arrays;
import java.util.Properties;

import org.apache.http.HttpHost;
import org.apache.http.auth.AuthScope;
import org.apache.http.auth.UsernamePasswordCredentials;
import org.apache.http.client.CredentialsProvider;
import org.apache.http.impl.client.BasicCredentialsProvider;
import org.apache.http.impl.nio.client.HttpAsyncClientBuilder;
import org.apache.kafka.clients.consumer.ConsumerConfig;
import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.apache.kafka.clients.consumer.ConsumerRecords;
import org.apache.kafka.clients.consumer.KafkaConsumer;
import org.apache.kafka.common.serialization.StringDeserializer;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.client.RestClient;
import org.elasticsearch.client.RestClientBuilder;
import org.elasticsearch.client.RestHighLevelClient;
import org.elasticsearch.common.xcontent.XContentType;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ElasticSearchConsumer {

	public static RestHighLevelClient createClient() {
		
		// In bonsai
		// https://mjey1o6ug5:pr4wemfnp9@kafka-intro-course-1907789141.us-east-1.bonsaisearch.net:443
		
		String hostname = "kafka-intro-course-1907789141.us-east-1.bonsaisearch.net";
		String username = "mjey1o6ug5";
		String password = "pr4wemfnp9";
		
		// don't do if you run a local ES
		final CredentialsProvider credentialsProvider = new BasicCredentialsProvider();
		credentialsProvider.setCredentials(AuthScope.ANY, 
				new UsernamePasswordCredentials(username, password));
		
		RestClientBuilder builder = RestClient.builder(
				new HttpHost(hostname, 443, "https")).setHttpClientConfigCallback(new RestClientBuilder.HttpClientConfigCallback() {
					@Override
					public HttpAsyncClientBuilder customizeHttpClient(HttpAsyncClientBuilder httpClientBuilder) {
						return httpClientBuilder.setDefaultCredentialsProvider(credentialsProvider);
					}
				});
		
		RestHighLevelClient client = new RestHighLevelClient(builder);
		return client;
	}

	public static KafkaConsumer<String, String> createConsumer(String topic) {
		String bootstrapServers = "localhost:9092";
		String groupId = "kafka-demo-elasticsearch";
		
		Properties properties = new Properties();
		
		properties.setProperty(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, bootstrapServers);
		properties.setProperty(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		properties.setProperty(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class.getName());
		properties.setProperty(ConsumerConfig.GROUP_ID_CONFIG, groupId);
		// valid values for auto.offset.reset = [ earliest, latest, none ]
		//   earliest - read from very beginning of topic
		//   latest - read only from new messages on words
		//   none - throw an error if no offsets being saved
		properties.setProperty(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, "earliest");
		
		// create consumer
		KafkaConsumer<String, String> consumer = new KafkaConsumer<String, String>(properties);
		consumer.subscribe(Arrays.asList(topic));
		
		return consumer;	
	}
	
	@SuppressWarnings("deprecation")
	public static void main(String[] args) throws IOException{
		Logger logger = LoggerFactory.getLogger(ElasticSearchConsumer.class.getName());
		RestHighLevelClient client = createClient();
		
		KafkaConsumer<String,String> consumer = createConsumer("twitter_tweets"); 
		
		// poll for new data
		while(true) {
			//consumer.poll(100);
			ConsumerRecords<String, String> records = consumer.poll(Duration.ofMillis(100));
			
			for (ConsumerRecord<String, String> record : records) {
				
				/*
				if(record.value() == null) {
					System.out.println("record.value() is null");
				} else {
					System.out.println(record.value());
					//where we insert data into ElasticSearch
					IndexRequest indexRequest = new IndexRequest("twitter", "tweets").source(record.value(), XContentType.JSON);
					
					IndexResponse indexResponse = client.index(indexRequest, RequestOptions.DEFAULT);
					String id = indexResponse.getId();
					logger.info(id);
				}
				*/
				
				//where we insert data into ElasticSearch
				IndexRequest indexRequest = new IndexRequest("twitter", "tweets").source(record.value(), XContentType.JSON);
				
				IndexResponse indexResponse = client.index(indexRequest, RequestOptions.DEFAULT);
				String id = indexResponse.getId();
				logger.info(id);
				
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
			}
		}		
				
		// close the client gracefully
		//client.close();
	}

}